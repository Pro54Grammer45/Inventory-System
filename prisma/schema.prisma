// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Item {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  description  String?
  category     Category @relation(fields: [categoryId], references: [id])
  categoryId   String   @db.ObjectId
  sku          String   @unique
  barcode      String?
  quantity     Int
  unit         Unit     @relation(fields: [unitId], references: [id])
  unitId       String   @db.ObjectId
  brand        Brand    @relation(fields: [brandId], references: [id])
  brandId      String   @db.ObjectId
  sellingPrice Float
  buyingPrice  Float
  supplier     String
  reOrderPoint Int
  location     String?
  imageUrl     String
  weight       Float?
  dimensions   String?
  taxRate      Float
  notes        String?
}

model Category {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  Item        Item[]
}

model Unit {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  abbreviation String
  Item         Item[]
}

model Brand {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  Item Item[]
}

model Warehouse {
  id                      String                    @id @default(auto()) @map("_id") @db.ObjectId
  name                    String
  location                String?
  description             String?
  warehouseType           String
  AddStockAdjustment      AddStockAdjustment[]
  givingStockTransfers    TransferStockAdjustment[] @relation(name: "GivingWarehouse")
  receivingStockTransfers TransferStockAdjustment[] @relation(name: "ReceivingWarehouse")
}

model AddStockAdjustment {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  referenceNumber String
  addStockQty     Int
  notes           String?
  warehouse       Warehouse @relation(fields: [warehouseId], references: [id])
  warehouseId     String    @db.ObjectId
}

model TransferStockAdjustment {
  id                   String    @id @default(auto()) @map("_id") @db.ObjectId
  referenceNumber      String
  transferStockQty     Int
  notes                String?
  givingWarehouse      Warehouse @relation(name: "GivingWarehouse", fields: [givingWarehouseId], references: [id])
  givingWarehouseId    String    @db.ObjectId
  receivingWarehouse   Warehouse @relation(name: "ReceivingWarehouse", fields: [receivingWarehouseId], references: [id])
  receivingWarehouseId String    @db.ObjectId
}
